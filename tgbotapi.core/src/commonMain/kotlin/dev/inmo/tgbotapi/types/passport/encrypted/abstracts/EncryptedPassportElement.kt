package dev.inmo.tgbotapi.types.passport.encrypted.abstracts

import dev.inmo.micro_utils.crypto.SourceBytes
import dev.inmo.micro_utils.serialization.base64.Base64BytesToFromStringSerializer
import dev.inmo.tgbotapi.utils.internal.ClassCastsIncluded
import dev.inmo.tgbotapi.types.passport.encrypted.EncryptedElementSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.JsonObject

typealias PassportElementHash = SourceBytes

@Serializable(EncryptedElementSerializer::class)
@ClassCastsIncluded
interface EncryptedPassportElement {
    val hash: PassportElementHash
}

@Suppress("SERIALIZER_TYPE_INCOMPATIBLE")
@Serializable(EncryptedElementSerializer::class)
data class UnknownEncryptedPassportElement(
    val rawJson: JsonObject,
    @Serializable(Base64BytesToFromStringSerializer::class)
    override val hash: PassportElementHash
) : EncryptedPassportElement {
    // Autogenerated with advice of Intellij IDEA
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other == null || this::class != other::class) return false

        other as UnknownEncryptedPassportElement

        if (rawJson != other.rawJson) return false
        if (!hash.contentEquals(other.hash)) return false

        return true
    }

    // Autogenerated with advice of Intellij IDEA
    override fun hashCode(): Int {
        var result = rawJson.hashCode()
        result = 31 * result + hash.contentHashCode()
        return result
    }
}
