package dev.inmo.tgbotapi.types.message

import korlibs.time.DateTime
import dev.inmo.tgbotapi.types.*
import dev.inmo.tgbotapi.types.buttons.InlineKeyboardMarkup
import dev.inmo.tgbotapi.types.chat.*
import dev.inmo.tgbotapi.types.chat.CommonBot
import dev.inmo.tgbotapi.types.chat.User
import dev.inmo.tgbotapi.types.message.ChatEvents.suggested.SuggestedPostInfo
import dev.inmo.tgbotapi.types.message.abstracts.*
import dev.inmo.tgbotapi.types.message.content.MessageContent
import kotlinx.serialization.SerialName

data class ConnectedFromChannelGroupContentMessageImpl<T : MessageContent>(
    override val chat: PreviewGroupChat,
    override val channel: PreviewChannelChat,
    override val messageId: MessageId,
    override val date: DateTime,
    override val forwardOrigin: MessageOrigin?,
    override val editDate: DateTime?,
    override val hasProtectedContent: Boolean,
    override val replyInfo: ReplyInfo?,
    override val replyMarkup: InlineKeyboardMarkup?,
    override val content: T,
    override val senderBot: CommonBot?,
    override val authorSignature: AuthorSignature?,
    override val mediaGroupId: MediaGroupId?,
    override val fromOffline: Boolean,
    @SerialName(paidMessageStarCountField)
    override val cost: Int? = null,
) : ConnectedFromChannelGroupContentMessage<T> {

    constructor(
        chat: PreviewGroupChat,
        channel: PreviewChannelChat,
        messageId: MessageId,
        date: DateTime,
        forwardInfo: ForwardInfo,
        editDate: DateTime?,
        hasProtectedContent: Boolean,
        replyTo: AccessibleMessage?,
        replyMarkup: InlineKeyboardMarkup?,
        content: T,
        senderBot: CommonBot?,
        authorSignature: AuthorSignature?,
        mediaGroupId: MediaGroupId?,
        fromOffline: Boolean,
        cost: Int? = null,
    ) : this(
        chat = chat,
        channel = channel,
        messageId = messageId,
        date = date,
        forwardOrigin = forwardInfo.messageOrigin(),
        editDate = editDate,
        hasProtectedContent = hasProtectedContent,
        replyInfo = replyTo ?.let { ReplyInfo.Internal(it) },
        replyMarkup = replyMarkup,
        content = content,
        senderBot = senderBot,
        authorSignature = authorSignature,
        mediaGroupId = mediaGroupId,
        fromOffline = fromOffline,
        cost = cost,
    )
}

data class UnconnectedFromChannelGroupContentMessageImpl<T: MessageContent>(
    override val chat: PreviewGroupChat,
    override val channel: PreviewChannelChat,
    override val messageId: MessageId,
    override val date: DateTime,
    override val forwardOrigin: MessageOrigin?,
    override val editDate: DateTime?,
    override val hasProtectedContent: Boolean,
    override val replyInfo: ReplyInfo?,
    override val replyMarkup: InlineKeyboardMarkup?,
    override val content: T,
    override val senderBot: CommonBot?,
    override val authorSignature: AuthorSignature?,
    override val mediaGroupId: MediaGroupId?,
    override val fromOffline: Boolean,
    @SerialName(paidMessageStarCountField)
    override val cost: Int? = null,
) : UnconnectedFromChannelGroupContentMessage<T> {
    constructor(
        chat: PreviewGroupChat,
        channel: PreviewChannelChat,
        messageId: MessageId,
        date: DateTime,
        forwardInfo: ForwardInfo,
        editDate: DateTime?,
        hasProtectedContent: Boolean,
        replyTo: AccessibleMessage?,
        replyMarkup: InlineKeyboardMarkup?,
        content: T,
        senderBot: CommonBot?,
        authorSignature: AuthorSignature?,
        mediaGroupId: MediaGroupId?,
        fromOffline: Boolean,
        cost: Int? = null,
    ) : this(
        chat = chat,
        channel = channel,
        messageId = messageId,
        date = date,
        forwardOrigin = forwardInfo.messageOrigin(),
        editDate = editDate,
        hasProtectedContent = hasProtectedContent,
        replyInfo = replyTo ?.let { ReplyInfo.Internal(it) },
        replyMarkup = replyMarkup,
        content = content,
        senderBot = senderBot,
        authorSignature = authorSignature,
        mediaGroupId = mediaGroupId,
        fromOffline = fromOffline,
        cost = cost,
    )
}

data class AnonymousGroupContentMessageImpl<T : MessageContent>(
    override val chat: PreviewGroupChat,
    override val messageId: MessageId,
    override val date: DateTime,
    override val forwardOrigin: MessageOrigin?,
    override val editDate: DateTime?,
    override val hasProtectedContent: Boolean,
    override val replyInfo: ReplyInfo?,
    override val replyMarkup: InlineKeyboardMarkup?,
    override val content: T,
    override val senderBot: CommonBot?,
    override val authorSignature: AuthorSignature?,
    override val mediaGroupId: MediaGroupId?,
    override val fromOffline: Boolean,
    @SerialName(paidMessageStarCountField)
    override val cost: Int? = null,
) : AnonymousGroupContentMessage<T> {
    constructor(
        chat: PreviewGroupChat,
        messageId: MessageId,
        date: DateTime,
        forwardInfo: ForwardInfo,
        editDate: DateTime?,
        hasProtectedContent: Boolean,
        replyTo: AccessibleMessage?,
        replyMarkup: InlineKeyboardMarkup?,
        content: T,
        senderBot: CommonBot?,
        authorSignature: AuthorSignature?,
        mediaGroupId: MediaGroupId?,
        fromOffline: Boolean,
        cost: Int? = null,
    ) : this(
        chat = chat,
        messageId = messageId,
        date = date,
        forwardOrigin = forwardInfo.messageOrigin(),
        editDate = editDate,
        hasProtectedContent = hasProtectedContent,
        replyInfo = replyTo ?.let { ReplyInfo.Internal(it) },
        replyMarkup = replyMarkup,
        content = content,
        senderBot = senderBot,
        authorSignature = authorSignature,
        mediaGroupId = mediaGroupId,
        fromOffline = fromOffline,
        cost = cost,
    )
}

data class CommonGroupContentMessageImpl<T : MessageContent>(
    override val chat: PreviewGroupChat,
    override val messageId: MessageId,
    override val from: User,
    override val date: DateTime,
    override val forwardOrigin: MessageOrigin?,
    override val editDate: DateTime?,
    override val hasProtectedContent: Boolean,
    override val replyInfo: ReplyInfo?,
    override val replyMarkup: InlineKeyboardMarkup?,
    override val content: T,
    override val senderBot: CommonBot?,
    override val mediaGroupId: MediaGroupId?,
    override val senderBoostsCount: Int?,
    override val fromOffline: Boolean,
    @SerialName(paidMessageStarCountField)
    override val cost: Int? = null,
) : CommonGroupContentMessage<T> {
    constructor(
        chat: PreviewGroupChat,
        messageId: MessageId,
        from: User,
        date: DateTime,
        forwardInfo: ForwardInfo,
        editDate: DateTime?,
        hasProtectedContent: Boolean,
        replyTo: AccessibleMessage?,
        replyMarkup: InlineKeyboardMarkup?,
        content: T,
        senderBot: CommonBot?,
        mediaGroupId: MediaGroupId?,
        senderBoostsCount: Int?,
        fromOffline: Boolean,
        cost: Int? = null,
    ) : this(
        chat = chat,
        messageId = messageId,
        from = from,
        date = date,
        forwardOrigin = forwardInfo.messageOrigin(),
        editDate = editDate,
        hasProtectedContent = hasProtectedContent,
        replyInfo = replyTo ?.let { ReplyInfo.Internal(it) },
        replyMarkup = replyMarkup,
        content = content,
        senderBot = senderBot,
        mediaGroupId = mediaGroupId,
        senderBoostsCount = senderBoostsCount,
        fromOffline = fromOffline,
        cost = cost,
    )
}

data class FromChannelForumContentMessageImpl<T: MessageContent>(
    override val chat: PreviewForumChat,
    override val channel: PreviewChannelChat,
    override val messageId: MessageId,
    override val threadId: MessageThreadId,
    override val date: DateTime,
    override val forwardOrigin: MessageOrigin?,
    override val editDate: DateTime?,
    override val hasProtectedContent: Boolean,
    override val replyInfo: ReplyInfo?,
    override val replyMarkup: InlineKeyboardMarkup?,
    override val content: T,
    override val senderBot: CommonBot?,
    override val authorSignature: AuthorSignature?,
    override val mediaGroupId: MediaGroupId?,
    override val fromOffline: Boolean,
    @SerialName(paidMessageStarCountField)
    override val cost: Int? = null,
) : FromChannelForumContentMessage<T> {
    constructor(
        chat: PreviewForumChat,
        channel: PreviewChannelChat,
        messageId: MessageId,
        threadId: MessageThreadId,
        date: DateTime,
        forwardInfo: ForwardInfo,
        editDate: DateTime?,
        hasProtectedContent: Boolean,
        replyTo: AccessibleMessage?,
        replyMarkup: InlineKeyboardMarkup?,
        content: T,
        senderBot: CommonBot?,
        authorSignature: AuthorSignature?,
        mediaGroupId: MediaGroupId?,
        fromOffline: Boolean,
        cost: Int? = null,
    ) : this(
        chat = chat,
        channel = channel,
        messageId = messageId,
        threadId = threadId,
        date = date,
        forwardOrigin = forwardInfo.messageOrigin(),
        editDate = editDate,
        hasProtectedContent = hasProtectedContent,
        replyInfo = replyTo ?.let { ReplyInfo.Internal(it) },
        replyMarkup = replyMarkup,
        content = content,
        senderBot = senderBot,
        authorSignature = authorSignature,
        mediaGroupId = mediaGroupId,
        fromOffline = fromOffline,
        cost = cost,
    )
}

data class FromChannelChannelDirectMessagesContentMessageImpl<T: MessageContent>(
    override val chat: PreviewChannelDirectMessagesChat,
    override val channel: PreviewChannelChat,
    override val messageId: MessageId,
    override val date: DateTime,
    override val directMessageTopic: DirectMessagesTopic,
    override val forwardOrigin: MessageOrigin?,
    override val editDate: DateTime?,
    override val hasProtectedContent: Boolean,
    override val replyInfo: ReplyInfo?,
    override val replyMarkup: InlineKeyboardMarkup?,
    override val content: T,
    override val senderBot: CommonBot?,
    override val authorSignature: AuthorSignature?,
    override val mediaGroupId: MediaGroupId?,
    override val fromOffline: Boolean,
    @SerialName(paidMessageStarCountField)
    override val cost: Int? = null,
) : FromChannelChannelDirectMessagesContentMessage<T> {
    constructor(
        chat: PreviewChannelDirectMessagesChat,
        channel: PreviewChannelChat,
        messageId: MessageId,
        date: DateTime,
        directMessageTopic: DirectMessagesTopic,
        forwardInfo: ForwardInfo,
        editDate: DateTime?,
        hasProtectedContent: Boolean,
        replyTo: AccessibleMessage?,
        replyMarkup: InlineKeyboardMarkup?,
        content: T,
        senderBot: CommonBot?,
        authorSignature: AuthorSignature?,
        mediaGroupId: MediaGroupId?,
        fromOffline: Boolean,
        cost: Int? = null,
    ) : this(
        chat = chat,
        channel = channel,
        messageId = messageId,
        date = date,
        directMessageTopic = directMessageTopic,
        forwardOrigin = forwardInfo.messageOrigin(),
        editDate = editDate,
        hasProtectedContent = hasProtectedContent,
        replyInfo = replyTo ?.let { ReplyInfo.Internal(it) },
        replyMarkup = replyMarkup,
        content = content,
        senderBot = senderBot,
        authorSignature = authorSignature,
        mediaGroupId = mediaGroupId,
        fromOffline = fromOffline,
        cost = cost,
    )
}

data class FromChannelSuggestedChannelDirectMessagesContentMessageImpl<T: MessageContent>(
    override val chat: PreviewChannelDirectMessagesChat,
    override val channel: PreviewChannelChat,
    override val messageId: MessageId,
    override val date: DateTime,
    override val directMessageTopic: DirectMessagesTopic,
    override val forwardOrigin: MessageOrigin?,
    override val editDate: DateTime?,
    override val hasProtectedContent: Boolean,
    override val replyInfo: ReplyInfo?,
    override val replyMarkup: InlineKeyboardMarkup?,
    override val content: T,
    override val senderBot: CommonBot?,
    override val authorSignature: AuthorSignature?,
    override val mediaGroupId: MediaGroupId?,
    override val fromOffline: Boolean,
    override val suggestedPostInfo: SuggestedPostInfo,
    @SerialName(paidMessageStarCountField)
    override val cost: Int? = null,
) : FromChannelSuggestedChannelDirectMessagesContentMessage<T> {
    constructor(
        chat: PreviewChannelDirectMessagesChat,
        channel: PreviewChannelChat,
        messageId: MessageId,
        date: DateTime,
        directMessageTopic: DirectMessagesTopic,
        forwardInfo: ForwardInfo,
        editDate: DateTime?,
        hasProtectedContent: Boolean,
        replyTo: AccessibleMessage?,
        replyMarkup: InlineKeyboardMarkup?,
        content: T,
        senderBot: CommonBot?,
        authorSignature: AuthorSignature?,
        mediaGroupId: MediaGroupId?,
        fromOffline: Boolean,
        suggestedPostInfo: SuggestedPostInfo,
        cost: Int? = null,
    ) : this(
        chat = chat,
        channel = channel,
        messageId = messageId,
        date = date,
        directMessageTopic = directMessageTopic,
        forwardOrigin = forwardInfo.messageOrigin(),
        editDate = editDate,
        hasProtectedContent = hasProtectedContent,
        replyInfo = replyTo ?.let { ReplyInfo.Internal(it) },
        replyMarkup = replyMarkup,
        content = content,
        senderBot = senderBot,
        authorSignature = authorSignature,
        mediaGroupId = mediaGroupId,
        fromOffline = fromOffline,
        suggestedPostInfo = suggestedPostInfo,
        cost = cost,
    )
}

data class AnonymousForumContentMessageImpl<T : MessageContent>(
    override val chat: PreviewForumChat,
    override val messageId: MessageId,
    override val threadId: MessageThreadId,
    override val date: DateTime,
    override val forwardOrigin: MessageOrigin?,
    override val editDate: DateTime?,
    override val hasProtectedContent: Boolean,
    override val replyInfo: ReplyInfo?,
    override val replyMarkup: InlineKeyboardMarkup?,
    override val content: T,
    override val senderBot: CommonBot?,
    override val authorSignature: AuthorSignature?,
    override val mediaGroupId: MediaGroupId?,
    override val fromOffline: Boolean,
    @SerialName(paidMessageStarCountField)
    override val cost: Int? = null,
) : AnonymousForumContentMessage<T> {
    constructor(
        chat: PreviewForumChat,
        messageId: MessageId,
        threadId: MessageThreadId,
        date: DateTime,
        forwardInfo: ForwardInfo,
        editDate: DateTime?,
        hasProtectedContent: Boolean,
        replyTo: AccessibleMessage?,
        replyMarkup: InlineKeyboardMarkup?,
        content: T,
        senderBot: CommonBot?,
        authorSignature: AuthorSignature?,
        mediaGroupId: MediaGroupId?,
        fromOffline: Boolean,
        cost: Int? = null,
    ) : this(
        chat = chat,
        messageId = messageId,
        threadId = threadId,
        date = date,
        forwardOrigin = forwardInfo.messageOrigin(),
        editDate = editDate,
        hasProtectedContent = hasProtectedContent,
        replyInfo = replyTo ?.let { ReplyInfo.Internal(it) },
        replyMarkup = replyMarkup,
        content = content,
        senderBot = senderBot,
        authorSignature = authorSignature,
        mediaGroupId = mediaGroupId,
        fromOffline = fromOffline,
        cost = cost,
    )
}

data class CommonForumContentMessageImpl<T : MessageContent>(
    override val chat: PreviewForumChat,
    override val messageId: MessageId,
    override val threadId: MessageThreadId,
    override val from: User,
    override val date: DateTime,
    override val forwardOrigin: MessageOrigin?,
    override val editDate: DateTime?,
    override val hasProtectedContent: Boolean,
    override val replyInfo: ReplyInfo?,
    override val replyMarkup: InlineKeyboardMarkup?,
    override val content: T,
    override val senderBot: CommonBot?,
    override val mediaGroupId: MediaGroupId?,
    override val senderBoostsCount: Int?,
    override val fromOffline: Boolean,
    @SerialName(paidMessageStarCountField)
    override val cost: Int? = null,
) : CommonForumContentMessage<T> {
    constructor(
        chat: PreviewForumChat,
        messageId: MessageId,
        threadId: MessageThreadId,
        from: User,
        date: DateTime,
        forwardInfo: ForwardInfo,
        editDate: DateTime?,
        hasProtectedContent: Boolean,
        replyTo: AccessibleMessage?,
        replyMarkup: InlineKeyboardMarkup?,
        content: T,
        senderBot: CommonBot?,
        mediaGroupId: MediaGroupId?,
        senderBoostsCount: Int?,
        fromOffline: Boolean,
        cost: Int? = null,
    ) : this(
        chat = chat,
        messageId = messageId,
        threadId = threadId,
        from = from,
        date = date,
        forwardOrigin = forwardInfo.messageOrigin(),
        editDate = editDate,
        hasProtectedContent = hasProtectedContent,
        replyInfo = replyTo ?.let { ReplyInfo.Internal(it) },
        replyMarkup = replyMarkup,
        content = content,
        senderBot = senderBot,
        mediaGroupId = mediaGroupId,
        senderBoostsCount = senderBoostsCount,
        fromOffline = fromOffline,
        cost = cost,
    )
}


data class CommonChannelDirectMessagesContentMessageImpl<T : MessageContent>(
    override val chat: PreviewChannelDirectMessagesChat,
    override val messageId: MessageId,
    override val from: User,
    override val date: DateTime,
    override val directMessageTopic: DirectMessagesTopic,
    override val forwardOrigin: MessageOrigin?,
    override val editDate: DateTime?,
    override val hasProtectedContent: Boolean,
    override val replyInfo: ReplyInfo?,
    override val replyMarkup: InlineKeyboardMarkup?,
    override val content: T,
    override val senderBot: CommonBot?,
    override val mediaGroupId: MediaGroupId?,
    override val senderBoostsCount: Int?,
    override val fromOffline: Boolean,
    @SerialName(paidMessageStarCountField)
    override val cost: Int? = null,
) : CommonChannelDirectMessagesContentMessage<T> {
    constructor(
        chat: PreviewChannelDirectMessagesChat,
        messageId: MessageId,
        from: User,
        date: DateTime,
        directMessageTopic: DirectMessagesTopic,
        forwardInfo: ForwardInfo,
        editDate: DateTime?,
        hasProtectedContent: Boolean,
        replyTo: AccessibleMessage?,
        replyMarkup: InlineKeyboardMarkup?,
        content: T,
        senderBot: CommonBot?,
        mediaGroupId: MediaGroupId?,
        senderBoostsCount: Int?,
        fromOffline: Boolean,
        cost: Int? = null,
    ) : this(
        chat = chat,
        messageId = messageId,
        from = from,
        date = date,
        directMessageTopic = directMessageTopic,
        forwardOrigin = forwardInfo.messageOrigin(),
        editDate = editDate,
        hasProtectedContent = hasProtectedContent,
        replyInfo = replyTo ?.let { ReplyInfo.Internal(it) },
        replyMarkup = replyMarkup,
        content = content,
        senderBot = senderBot,
        mediaGroupId = mediaGroupId,
        senderBoostsCount = senderBoostsCount,
        fromOffline = fromOffline,
        cost = cost,
    )
}


data class CommonSuggestedChannelDirectMessagesContentMessageImpl<T : MessageContent>(
    override val chat: PreviewChannelDirectMessagesChat,
    override val messageId: MessageId,
    override val from: User,
    override val date: DateTime,
    override val directMessageTopic: DirectMessagesTopic,
    override val forwardOrigin: MessageOrigin?,
    override val editDate: DateTime?,
    override val hasProtectedContent: Boolean,
    override val replyInfo: ReplyInfo?,
    override val replyMarkup: InlineKeyboardMarkup?,
    override val content: T,
    override val senderBot: CommonBot?,
    override val mediaGroupId: MediaGroupId?,
    override val senderBoostsCount: Int?,
    override val fromOffline: Boolean,
    override val suggestedPostInfo: SuggestedPostInfo,
    @SerialName(paidMessageStarCountField)
    override val cost: Int? = null
) : CommonSuggestedChannelDirectMessagesContentMessage<T> {
    constructor(
        chat: PreviewChannelDirectMessagesChat,
        messageId: MessageId,
        from: User,
        date: DateTime,
        directMessageTopic: DirectMessagesTopic,
        forwardInfo: ForwardInfo,
        editDate: DateTime?,
        hasProtectedContent: Boolean,
        replyTo: AccessibleMessage?,
        replyMarkup: InlineKeyboardMarkup?,
        content: T,
        senderBot: CommonBot?,
        mediaGroupId: MediaGroupId?,
        senderBoostsCount: Int?,
        fromOffline: Boolean,
        suggestedPostInfo: SuggestedPostInfo,
        cost: Int? = null,
    ) : this(
        chat = chat,
        messageId = messageId,
        from = from,
        date = date,
        directMessageTopic = directMessageTopic,
        forwardOrigin = forwardInfo.messageOrigin(),
        editDate = editDate,
        hasProtectedContent = hasProtectedContent,
        replyInfo = replyTo ?.let { ReplyInfo.Internal(it) },
        replyMarkup = replyMarkup,
        content = content,
        senderBot = senderBot,
        mediaGroupId = mediaGroupId,
        senderBoostsCount = senderBoostsCount,
        fromOffline = fromOffline,
        suggestedPostInfo = suggestedPostInfo,
        cost = cost,
    )
}
